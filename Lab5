<!DOCTYPE html>
<html>
    <head>
      <title>Lab 5</title>

        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.4/dist/leaflet.css"
        crossorigin=""/>

        <script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js"
        crossorigin=""></script>

        <style type="text/css">
      html, body { margin: 0; padding: 0; height: 100%; }
      #map { min-height: 100%; }
    </style>

        <div id="map"></div>

        <script type="text/javascript">

          var map = L.map('map', {
              center: [34.666, 104.9569],
              zoom: 5
          });

          var basemaps = {
    "Light Canvas": canvas,
    "Satellite Imagery": imagery
};

var overlaymaps = {
    "China Provinces ": provinces
};


          var imagery = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}{r}.{ext}', {
	attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	subdomains: 'abcd',
	minZoom: 0,
	maxZoom: 18,
	ext: 'png'
});

var surface = L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}{r}.{ext}', {
	attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	subdomains: 'abcd',
	minZoom: 0,
	maxZoom: 20,
	ext: 'png'
}).addTo(map);


         L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.{ext}', {
	attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
	subdomains: 'abcd',
	minZoom: 0,
	maxZoom: 20,
	ext: 'png'
}).addTo(map);

L.control.layers(basemaps, overlaymaps).addTo(map);

 var provinces = new L.geoJson(data, {style:style}).addTo(map);

var coviddata = new L.geoJson(coviddata).addTo(map);

var legend = L.control({position: 'bottomright'});

    legend.onAdd = function (map) {

      var div = L.DomUtil.create('div', 'legend'),
        grades = [0, 1000000, 2000000, 5000000, 10000000];

         div.innerHTML = '<b>Population 2019 <br><br></b>';

        for (var i = 0; i < grades.length; i++) {
        div.innerHTML +=
        '<i style="background:' + getColor(grades[i] + 1) + '"></i>' +
          grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] +   '<br><br>' : '+');
                  }

                  return div;
              };

            legend.addTo(map);


            map.on('overlayremove', function(eventLayer){
              if (eventLayer.name == 'provinces'){ 
                map.removeControl(legend); 
              }
            });

        
            map.on('overlayadd', function(eventLayer){
              if (eventLayer.name == 'provinces'){
                legend.addTo(map);
              }
            });

            #map { min-height: 100%; }
                        .legend {
                          padding: 6px 8px;
                          line-height: 18px;
                          background: rgba(255,255,255,0.9);
                          box-shadow: 0 0 15px rgba(0,0,0,0.2);
                          border-radius: 5px;
                      }

                       
                       .legend i {
                          width: 18px;
                          height: 18px;
                          float: left;
                          margin-right: 8px;
                          opacity: 0.7;
                      }

                      var onEachFeature = function(feature, layer) {
                              if (feature.properties) {
                                var prop = feature.properties;

                    

                          var popup = '<h3>'+prop['Location']+'</h3>'+'<br>Cases Day 1: '+prop['1']+'<br>Cases Day 16: '+prop['covid'];
                              

                                layer.bindPopup(popup, {maxWidth: "auto"});
                              }
                            }; 

                            var coviddata = new L.geoJson(covidData, {
                                onEachFeature = onEachFeature,
                                pointToLayer = function(feature, ll){
                                    return L.circleMarker(ll, {
                                            color: '#000000',
                                            opacity: 1,
                                            weight: 2,
                                            fillColor: '#808080',
                                            fillOpacity: .5,                                    
                                            radius: calcRadius(feature.properties.covid)
                                        });
                                    }


var data = {"type":"FeatureCollection","crs":{"type":"name","properties":{"name":"urn:ogc:def:crs:OGC:1.3:CRS84"}},"features":[{"type":"Feature","properties":{"GBCODE90":"340000","NAME_PY":"Anhui","NAME_HZ":"Anhu","POP10":59500510},"geometry":{"type":"Polygon","coordinates":[[[117.65244276239659,29.61467102623574],[117.53655289579561,29.600055666462904],[117.52491960793985,29.65990685290835],…………  ;
<script src="https://ecostas2.github.io/lab5/data.js"></script>

L.control.layers(basemaps, overlaymaps, {collapsed:false}).addTo(map);

function getColor(value) {
                return value > 50000000 ? '#54278f':
                       value > 25000000  ? '#756bb1':
                       value > 10000000  ? '#9e9ac8':
                       value > 5000000  ? '#cbc9e2':
                                          '#f2f0f7';
            }

	function style(feature){
                return {
                    fillColor: getColor(feature.properties.POP10),
                    weight: 2,
                    opacity: 1,
                    color: 'gray',
                    fillOpacity: 0.9
                };
            }
            var minValue = 100;
            var minRadius = 5;

            function calcRadius(val) {
             return 0.9 * Math.pow(val/minValue, .7) * minRadius;
            }

            var coviddata = new L.geoJson(coviddata).addTo(map);

            var coviddata = new L.geoJson(covidData, {
    pointToLayer: function(feature, ll){
        return L.circleMarker(ll, {
                color: '#000000',
                opacity: 1,
                weight: 2,
                fillColor: '#808080',
                fillOpacity: .5,
                //radius: 10
                radius: calcRadius(feature.properties.covid)
            });
        }



        </script>
   </body>
</html>
